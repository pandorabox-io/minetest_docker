diff --git a/src/map.cpp b/src/map.cpp
index 7c59edbaa..521ebde09 100644
--- a/src/map.cpp
+++ b/src/map.cpp
@@ -1189,6 +1189,8 @@ ServerMap::ServerMap(const std::string &savedir, IGameDef *gamedef,
 {
 	verbosestream<<FUNCTION_NAME<<std::endl;
 
+	m_threadpool = new ThreadPool(4);
+
 	// Tell the EmergeManager about our MapSettingsManager
 	emerge->map_settings_mgr = &settings_mgr;
 
@@ -1280,6 +1282,11 @@ ServerMap::~ServerMap()
 				<<", exception: "<<e.what()<<std::endl;
 	}
 
+	while (!m_threadpool->empty()){
+		sleep_ms(1);
+	}
+	delete m_threadpool;
+
 	/*
 		Close database if it was opened
 	*/
@@ -1726,16 +1733,20 @@ bool ServerMap::saveBlock(MapBlock *block, MapDatabase *db, int compression_leve
 		[0] u8 serialization version
 		[1] data
 	*/
-	std::ostringstream o(std::ios_base::binary);
-	o.write((char*) &version, 1);
-	block->serialize(o, version, true, compression_level);
+	MapBlock *block_copy = new MapBlock(*block);
 
-	bool ret = db->saveBlock(p3d, o.str());
-	if (ret) {
-		// We just wrote it to the disk so clear modified flag
-		block->resetModified();
-	}
-	return ret;
+	m_threadpool->enqueue(
+		[this, block_copy, version, compression_level, db, p3d](){
+			std::ostringstream o(std::ios_base::binary);
+			o.write((char*) &version, 1);
+			block_copy->serialize(o, version, true, compression_level);
+			db->saveBlock(p3d, o.str());
+	});
+
+	// We just wrote it to the disk so clear modified flag
+	block->resetModified();
+
+	return true;
 }
 
 void ServerMap::loadBlock(std::string *blob, v3s16 p3d, MapSector *sector, bool save_after_load)
diff --git a/src/map.h b/src/map.h
index e68795c4a..8d73dffe7 100644
--- a/src/map.h
+++ b/src/map.h
@@ -35,6 +35,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include "nodetimer.h"
 #include "map_settings_manager.h"
 #include "debug.h"
+#include "util/ThreadPool.h"
 
 class Settings;
 class MapDatabase;
@@ -381,7 +382,7 @@ class ServerMap : public Map
 	MapgenParams *getMapgenParams();
 
 	bool saveBlock(MapBlock *block);
-	static bool saveBlock(MapBlock *block, MapDatabase *db, int compression_level = -1);
+	bool saveBlock(MapBlock *block, MapDatabase *db, int compression_level = -1);
 	MapBlock* loadBlock(v3s16 p);
 	// Database version
 	void loadBlock(std::string *blob, v3s16 p3d, MapSector *sector, bool save_after_load=false);
@@ -412,6 +413,7 @@ class ServerMap : public Map
 private:
 	// Emerge manager
 	EmergeManager *m_emerge;
+	ThreadPool *m_threadpool = nullptr;
 
 	std::string m_savedir;
 	bool m_map_saving_enabled;
diff --git a/src/mapblock.cpp b/src/mapblock.cpp
index 0ca71e643..4fc639528 100644
--- a/src/mapblock.cpp
+++ b/src/mapblock.cpp
@@ -252,10 +252,10 @@ s16 MapBlock::getGroundLevel(v2s16 p2d)
 // sure we can handle all content ids. But it's absolutely worth it as it's
 // a speedup of 4 for one of the major time consuming functions on storing
 // mapblocks.
-static content_t getBlockNodeIdMapping_mapping[USHRT_MAX + 1];
 static void getBlockNodeIdMapping(NameIdMapping *nimap, MapNode *nodes,
 	const NodeDefManager *nodedef)
 {
+	content_t getBlockNodeIdMapping_mapping[USHRT_MAX + 1];
 	memset(getBlockNodeIdMapping_mapping, 0xFF, (USHRT_MAX + 1) * sizeof(content_t));
 
 	std::set<content_t> unknown_contents;
diff --git a/src/network/clientpackethandler.cpp b/src/network/clientpackethandler.cpp
index 65db02300..28c5b1406 100644
--- a/src/network/clientpackethandler.cpp
+++ b/src/network/clientpackethandler.cpp
@@ -320,7 +320,7 @@ void Client::handleCommand_BlockData(NetworkPacket* pkt)
 	}
 
 	if (m_localdb) {
-		ServerMap::saveBlock(block, m_localdb);
+		//ServerMap::saveBlock(block, m_localdb);
 	}
 
 	/*
diff --git a/src/server.cpp b/src/server.cpp
index 81cdd1f8d..ca6d003c4 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -242,6 +242,8 @@ Server::Server(
 	if (!gamespec.isValid())
 		throw ServerError("Supplied invalid gamespec");
 
+	m_threadpool = new ThreadPool(4);
+
 #if USE_PROMETHEUS
 	m_metrics_backend = std::unique_ptr<MetricsBackend>(createPrometheusMetricsBackend());
 #else
@@ -339,6 +341,8 @@ Server::~Server()
 		delete m_thread;
 	}
 
+	delete m_threadpool;
+
 	// Delete things in the reverse order of creation
 	delete m_emerge;
 	delete m_env;
@@ -2334,16 +2338,21 @@ void Server::SendBlockNoLock(session_t peer_id, MapBlock *block, u8 ver,
 		Create a packet with the block in the right format
 	*/
 	thread_local const int net_compression_level = rangelim(g_settings->getS16("map_compression_level_net"), -1, 9);
-	std::ostringstream os(std::ios_base::binary);
-	block->serialize(os, ver, false, net_compression_level);
-	block->serializeNetworkSpecific(os);
-	std::string s = os.str();
 
-	NetworkPacket pkt(TOCLIENT_BLOCKDATA, 2 + 2 + 2 + s.size(), peer_id);
+	MapBlock *block_copy = new MapBlock(*block);
+	m_threadpool->enqueue(
+		[this, block_copy, ver, peer_id](){
+			std::ostringstream os(std::ios_base::binary);
+			block_copy->serialize(os, ver, false, net_compression_level);
+			block_copy->serializeNetworkSpecific(os);
+			std::string s = os.str();
 
-	pkt << block->getPos();
-	pkt.putRawString(s.c_str(), s.size());
-	Send(&pkt);
+			NetworkPacket pkt(TOCLIENT_BLOCKDATA, 2 + 2 + 2 + s.size(), peer_id);
+
+			pkt << block_copy->getPos();
+			pkt.putRawString(s.c_str(), s.size());
+			Send(&pkt);
+	});
 }
 
 void Server::SendBlocks(float dtime)
diff --git a/src/server.h b/src/server.h
index 9857215d0..93a3acc77 100644
--- a/src/server.h
+++ b/src/server.h
@@ -43,6 +43,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include <list>
 #include <map>
 #include <vector>
+#include "util/ThreadPool.h"
 
 class ChatEvent;
 struct ChatEventChat;
@@ -673,6 +674,8 @@ class Server : public con::PeerHandler, public MapEventReceiver,
 	// Global server metrics backend
 	std::unique_ptr<MetricsBackend> m_metrics_backend;
 
+	ThreadPool *m_threadpool = nullptr;
+
 	// Server metrics
 	MetricCounterPtr m_uptime_counter;
 	MetricGaugePtr m_player_gauge;
