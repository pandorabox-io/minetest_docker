diff --git a/src/script/lua_api/l_server.cpp b/src/script/lua_api/l_server.cpp
index 6f934bb9d..6b6051004 100644
--- a/src/script/lua_api/l_server.cpp
+++ b/src/script/lua_api/l_server.cpp
@@ -27,6 +27,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include "environment.h"
 #include "remoteplayer.h"
 #include "log.h"
+#include "profiler.h"
 #include <algorithm>
 
 // request_shutdown()
@@ -403,6 +404,16 @@ int ModApiServer::l_get_modpath(lua_State *L)
 	return 1;
 }
 
+// get_profiler_value(profiler_name)
+int ModApiServer::l_get_profiler_value(lua_State *L)
+{
+	NO_MAP_LOCK_REQUIRED;
+	std::string profiler_name = luaL_checkstring(L, 1);
+	float value = g_profiler->getValue(profiler_name);
+	lua_pushnumber(L, value);
+	return 1;
+}
+
 // get_modnames()
 // the returned list is sorted alphabetically for you
 int ModApiServer::l_get_modnames(lua_State *L)
@@ -543,6 +554,7 @@ void ModApiServer::Initialize(lua_State *L, int top)
 
 	API_FCT(get_current_modname);
 	API_FCT(get_modpath);
+	API_FCT(get_profiler_value);
 	API_FCT(get_modnames);
 
 	API_FCT(print);
diff --git a/src/script/lua_api/l_server.h b/src/script/lua_api/l_server.h
index 938bfa8ef..7b02a1d4a 100644
--- a/src/script/lua_api/l_server.h
+++ b/src/script/lua_api/l_server.h
@@ -45,6 +45,9 @@ class ModApiServer : public ModApiBase
 	// get_modpath(modname)
 	static int l_get_modpath(lua_State *L);
 
+	// get_profiler_value(profiler_name)
+	static int l_get_profiler_value(lua_State *L);
+
 	// get_modnames()
 	// the returned list is sorted alphabetically for you
 	static int l_get_modnames(lua_State *L);
diff --git a/src/server.cpp b/src/server.cpp
index 7b3978462..bdb8ec1b1 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -109,8 +109,16 @@ void *ServerThread::run()
 		try {
 			m_server->AsyncRunStep();
 
+			// measure network receive time in milliseconds
+			TimeTaker m_timer("engine_network_receive_time", nullptr, PRECISION_MILLI);
+
+			// execute receive()
 			m_server->Receive();
 
+			// add measured time
+			float duration_ms = m_timer.stop(true);
+			g_profiler->add("engine_network_receive_time", duration_ms);
+
 		} catch (con::PeerNotFoundException &e) {
 			infostream<<"Server: PeerNotFoundException"<<std::endl;
 		} catch (ClientNotFoundException &e) {
@@ -993,6 +1001,7 @@ void Server::Receive()
 			}
 
 			peer_id = pkt.getPeerId();
+			g_profiler->add("engine_network_receive_count", 1);
 			m_packet_recv_counter->increment();
 			ProcessData(&pkt);
 			m_packet_recv_processed_counter->increment();
