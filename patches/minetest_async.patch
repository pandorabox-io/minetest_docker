diff --git a/src/map.cpp b/src/map.cpp
index 7c59edbaa..12cb0e182 100644
--- a/src/map.cpp
+++ b/src/map.cpp
@@ -1189,6 +1189,8 @@ ServerMap::ServerMap(const std::string &savedir, IGameDef *gamedef,
 {
 	verbosestream<<FUNCTION_NAME<<std::endl;
 
+	m_threadpool = new ThreadPool(4);
+
 	// Tell the EmergeManager about our MapSettingsManager
 	emerge->map_settings_mgr = &settings_mgr;
 
@@ -1280,6 +1282,11 @@ ServerMap::~ServerMap()
 				<<", exception: "<<e.what()<<std::endl;
 	}
 
+	while (!m_threadpool->empty()){
+		sleep_ms(1);
+	}
+	delete m_threadpool;
+
 	/*
 		Close database if it was opened
 	*/
@@ -1726,16 +1733,36 @@ bool ServerMap::saveBlock(MapBlock *block, MapDatabase *db, int compression_leve
 		[0] u8 serialization version
 		[1] data
 	*/
+	/*
 	std::ostringstream o(std::ios_base::binary);
 	o.write((char*) &version, 1);
 	block->serialize(o, version, true, compression_level);
+	db->saveBlock(p3d, o.str());
+	*/
 
-	bool ret = db->saveBlock(p3d, o.str());
-	if (ret) {
-		// We just wrote it to the disk so clear modified flag
-		block->resetModified();
-	}
-	return ret;
+	std::ostringstream os(std::ios_base::binary);
+	block->serialize(os, version, true, 0);
+	std::string s = os.str();
+	MapBlock *block_copy = new MapBlock(block);
+
+	m_threadpool->enqueue(
+		[this, s, version, block_copy, compression_level, db](){
+			std::istringstream iss(s);
+			block_copy->deSerialize(iss, version, true);
+
+			std::ostringstream net_os(std::ios_base::binary);
+			net_os.write((char*) &version, 1);
+			block_copy->serialize(net_os, version, true, compression_level);
+			std::string net_s = net_os.str();
+
+			std::lock_guard<std::mutex> guard(m_saveblock_mutex);
+			db->saveBlock(block_copy->getPos(), net_s);
+	});
+
+	// We just wrote it to the disk so clear modified flag
+	block->resetModified();
+
+	return true;
 }
 
 void ServerMap::loadBlock(std::string *blob, v3s16 p3d, MapSector *sector, bool save_after_load)
diff --git a/src/map.h b/src/map.h
index e68795c4a..0c909589a 100644
--- a/src/map.h
+++ b/src/map.h
@@ -24,6 +24,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include <set>
 #include <map>
 #include <list>
+#include <mutex>
 
 #include "irrlichttypes_bloated.h"
 #include "mapnode.h"
@@ -35,6 +36,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include "nodetimer.h"
 #include "map_settings_manager.h"
 #include "debug.h"
+#include "util/ThreadPool.h"
 
 class Settings;
 class MapDatabase;
@@ -381,7 +383,7 @@ class ServerMap : public Map
 	MapgenParams *getMapgenParams();
 
 	bool saveBlock(MapBlock *block);
-	static bool saveBlock(MapBlock *block, MapDatabase *db, int compression_level = -1);
+	bool saveBlock(MapBlock *block, MapDatabase *db, int compression_level = -1);
 	MapBlock* loadBlock(v3s16 p);
 	// Database version
 	void loadBlock(std::string *blob, v3s16 p3d, MapSector *sector, bool save_after_load=false);
@@ -412,6 +414,8 @@ class ServerMap : public Map
 private:
 	// Emerge manager
 	EmergeManager *m_emerge;
+	ThreadPool *m_threadpool = nullptr;
+	std::mutex m_saveblock_mutex;
 
 	std::string m_savedir;
 	bool m_map_saving_enabled;
diff --git a/src/mapblock.cpp b/src/mapblock.cpp
index 0ca71e643..1bed97c87 100644
--- a/src/mapblock.cpp
+++ b/src/mapblock.cpp
@@ -76,6 +76,14 @@ MapBlock::MapBlock(Map *parent, v3s16 pos, IGameDef *gamedef, bool dummy):
 		reallocate();
 }
 
+MapBlock::MapBlock(MapBlock *block){
+	this->m_parent = block->m_parent;
+	this->m_pos = block->m_pos;
+	this->m_pos_relative = block->m_pos_relative;
+	this->m_gamedef = block->m_gamedef;
+	this->data = new MapNode[nodecount];
+}
+
 MapBlock::~MapBlock()
 {
 #ifndef SERVER
@@ -252,10 +260,10 @@ s16 MapBlock::getGroundLevel(v2s16 p2d)
 // sure we can handle all content ids. But it's absolutely worth it as it's
 // a speedup of 4 for one of the major time consuming functions on storing
 // mapblocks.
-static content_t getBlockNodeIdMapping_mapping[USHRT_MAX + 1];
 static void getBlockNodeIdMapping(NameIdMapping *nimap, MapNode *nodes,
 	const NodeDefManager *nodedef)
 {
+	content_t getBlockNodeIdMapping_mapping[USHRT_MAX + 1];
 	memset(getBlockNodeIdMapping_mapping, 0xFF, (USHRT_MAX + 1) * sizeof(content_t));
 
 	std::set<content_t> unknown_contents;
diff --git a/src/mapblock.h b/src/mapblock.h
index 7b82301e9..470f6b415 100644
--- a/src/mapblock.h
+++ b/src/mapblock.h
@@ -74,6 +74,7 @@ class MapBlock
 {
 public:
 	MapBlock(Map *parent, v3s16 pos, IGameDef *gamedef, bool dummy=false);
+	MapBlock(MapBlock *block);
 	~MapBlock();
 
 	/*virtual u16 nodeContainerId() const
diff --git a/src/network/clientpackethandler.cpp b/src/network/clientpackethandler.cpp
index 65db02300..28c5b1406 100644
--- a/src/network/clientpackethandler.cpp
+++ b/src/network/clientpackethandler.cpp
@@ -320,7 +320,7 @@ void Client::handleCommand_BlockData(NetworkPacket* pkt)
 	}
 
 	if (m_localdb) {
-		ServerMap::saveBlock(block, m_localdb);
+		//ServerMap::saveBlock(block, m_localdb);
 	}
 
 	/*
diff --git a/src/server.cpp b/src/server.cpp
index d37d847a9..c8f4b535c 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -250,6 +250,8 @@ Server::Server(
 	if (!gamespec.isValid())
 		throw ServerError("Supplied invalid gamespec");
 
+	m_threadpool = new ThreadPool(4);
+
 #if USE_PROMETHEUS
 	m_metrics_backend = std::unique_ptr<MetricsBackend>(createPrometheusMetricsBackend());
 #else
@@ -279,7 +281,39 @@ Server::Server(
 			"minetest_core_server_packet_recv_processed",
 			"Valid received packets processed");
 
+	m_sendblocks_time = m_metrics_backend->addCounter(
+			"minetest_core_sendblockstime",
+			"Microseconds used for block sending"
+	);
+
+	m_sent_blocks = m_metrics_backend->addCounter(
+			"minetest_core_sent_blocks",
+			"number of sent blocks"
+	);
+
+	m_env_step_time = m_metrics_backend->addCounter(
+			"minetest_core_step_time",
+			"step time count"
+	);
+
+	m_map_timer_unload_time = m_metrics_backend->addCounter(
+			"minetest_core_timer_unload_time",
+			"map timer and unload time"
+	);
+
+	m_mapedit_time = m_metrics_backend->addCounter(
+			"minetest_core_mapedit_time",
+			"map edit time"
+	);
+
+	m_mapsave_time = m_metrics_backend->addCounter(
+			"minetest_core_mapsave_time",
+			"map save time"
+	);
+
 	m_lag_gauge->set(g_settings->getFloat("dedicated_server_step"));
+
+	m_threadpool = new ThreadPool(4);
 }
 
 Server::~Server()
@@ -347,6 +381,8 @@ Server::~Server()
 		delete m_thread;
 	}
 
+	delete m_threadpool;
+
 	// Delete things in the reverse order of creation
 	delete m_emerge;
 	delete m_env;
@@ -451,7 +487,7 @@ void Server::init()
 
 	// Initialize Environment
 	m_startup_server_map = nullptr; // Ownership moved to ServerEnvironment
-	m_env = new ServerEnvironment(servermap, m_script, this, m_path_world);
+	m_env = new ServerEnvironment(servermap, m_script, this, m_path_world, m_metrics_backend.get());
 
 	m_inventory_mgr->setEnv(m_env);
 	m_clients.setEnv(m_env);
@@ -611,18 +647,28 @@ void Server::AsyncRunStep(bool initial_step)
 		}
 		m_env->reportMaxLagEstimate(max_lag);
 		// Step environment
+
+		u64 start_time = porting::getTimeUs();
 		m_env->step(dtime);
+		u64 end_time = porting::getTimeUs();
+
+		m_env_step_time->increment(end_time - start_time);
 	}
 
 	static const float map_timer_and_unload_dtime = 2.92;
 	if(m_map_timer_and_unload_interval.step(dtime, map_timer_and_unload_dtime))
 	{
+		u64 start_time = porting::getTimeUs();
 		MutexAutoLock lock(m_env_mutex);
 		// Run Map's timers and unload unused data
 		ScopeProfiler sp(g_profiler, "Server: map timer and unload");
 		m_env->getMap().timerUpdate(map_timer_and_unload_dtime,
 			g_settings->getFloat("server_unload_unused_data_timeout"),
 			U32_MAX);
+
+		u64 end_time = porting::getTimeUs();
+
+		m_map_timer_unload_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -843,6 +889,8 @@ void Server::AsyncRunStep(bool initial_step)
 		Send queued-for-sending map edit events.
 	*/
 	{
+		u64 start_time = porting::getTimeUs();
+
 		// We will be accessing the environment
 		MutexAutoLock lock(m_env_mutex);
 
@@ -943,6 +991,9 @@ void Server::AsyncRunStep(bool initial_step)
 		// Send all metadata updates
 		if (node_meta_updates.size())
 			sendMetadataChanged(node_meta_updates);
+
+		u64 end_time = porting::getTimeUs();
+		m_mapedit_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -961,6 +1012,8 @@ void Server::AsyncRunStep(bool initial_step)
 
 	// Save map, players and auth stuff
 	{
+		u64 start_time = porting::getTimeUs();
+
 		float &counter = m_savemap_timer;
 		counter += dtime;
 		static thread_local const float save_interval =
@@ -985,6 +1038,9 @@ void Server::AsyncRunStep(bool initial_step)
 			// Save environment metadata
 			m_env->saveMeta();
 		}
+
+		u64 end_time = porting::getTimeUs();
+		m_mapsave_time->increment(end_time - start_time);
 	}
 
 	m_shutdown_state.tick(dtime, this);
@@ -2343,6 +2399,7 @@ void Server::SendBlockNoLock(session_t peer_id, MapBlock *block, u8 ver,
 		Create a packet with the block in the right format
 	*/
 	thread_local const int net_compression_level = rangelim(g_settings->getS16("map_compression_level_net"), -1, 9);
+	/*
 	std::ostringstream os(std::ios_base::binary);
 	block->serialize(os, ver, false, net_compression_level);
 	block->serializeNetworkSpecific(os);
@@ -2353,10 +2410,35 @@ void Server::SendBlockNoLock(session_t peer_id, MapBlock *block, u8 ver,
 	pkt << block->getPos();
 	pkt.putRawString(s.c_str(), s.size());
 	Send(&pkt);
+	*/
+
+	std::ostringstream os(std::ios_base::binary);
+	block->serialize(os, SER_FMT_VER_HIGHEST_WRITE, true, 0);
+	std::string s = os.str();
+	MapBlock *block_copy = new MapBlock(block);
+
+	m_threadpool->enqueue(
+		[this, s, ver, peer_id, block_copy](){
+			std::istringstream iss(s);
+			block_copy->deSerialize(iss, SER_FMT_VER_HIGHEST_WRITE, true);
+
+			std::ostringstream net_os(std::ios_base::binary);
+			block_copy->serialize(net_os, ver, false, net_compression_level);
+			block_copy->serializeNetworkSpecific(net_os);
+			std::string net_s = net_os.str();
+
+			NetworkPacket pkt(TOCLIENT_BLOCKDATA, 2 + 2 + 2 + s.size(), peer_id);
+
+			pkt << block_copy->getPos();
+			delete block_copy;
+			pkt.putRawString(net_s.c_str(), net_s.size());
+			Send(&pkt);
+	});
 }
 
 void Server::SendBlocks(float dtime)
 {
+	u64 start_time = porting::getTimeUs();
 	MutexAutoLock envlock(m_env_mutex);
 	//TODO check if one big lock could be faster then multiple small ones
 
@@ -2410,12 +2492,28 @@ void Server::SendBlocks(float dtime)
 		if (!client)
 			continue;
 
-		SendBlockNoLock(block_to_send.peer_id, block, client->serialization_version,
-				client->net_proto_version);
+		m_threadpool->enqueue(
+			[this, block_to_send, block, client](){
+			SendBlockNoLock(
+				block_to_send.peer_id,
+				block,
+				client->serialization_version,
+				client->net_proto_version
+			);
+		});
 
 		client->SentBlock(block_to_send.pos);
 		total_sending++;
+		m_sent_blocks->increment(1);
 	}
+
+	while (!m_threadpool->empty()){
+		sleep_ms(1);
+	}
+
+	u64 end_time = porting::getTimeUs();
+	m_sendblocks_time->increment(end_time - start_time);
+
 	m_clients.unlock();
 }
 
diff --git a/src/server.h b/src/server.h
index 9857215d0..833e8bf91 100644
--- a/src/server.h
+++ b/src/server.h
@@ -43,6 +43,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include <list>
 #include <map>
 #include <vector>
+#include "util/ThreadPool.h"
 
 class ChatEvent;
 struct ChatEventChat;
@@ -581,6 +582,9 @@ class Server : public con::PeerHandler, public MapEventReceiver,
 
 	std::unordered_map<std::string, Translations> server_translations;
 
+	// Worker thread pool
+	ThreadPool *m_threadpool = nullptr;
+
 	/*
 		Threads
 	*/
@@ -682,6 +686,13 @@ class Server : public con::PeerHandler, public MapEventReceiver,
 	MetricCounterPtr m_aom_buffer_counter;
 	MetricCounterPtr m_packet_recv_counter;
 	MetricCounterPtr m_packet_recv_processed_counter;
+
+	MetricCounterPtr m_sent_blocks;
+	MetricCounterPtr m_sendblocks_time;
+	MetricCounterPtr m_env_step_time;
+	MetricCounterPtr m_map_timer_unload_time;
+	MetricCounterPtr m_mapedit_time;
+	MetricCounterPtr m_mapsave_time;
 };
 
 /*
diff --git a/src/serverenvironment.cpp b/src/serverenvironment.cpp
index 99e815bd4..dd71760e7 100644
--- a/src/serverenvironment.cpp
+++ b/src/serverenvironment.cpp
@@ -393,13 +393,14 @@ static std::random_device seed;
 
 ServerEnvironment::ServerEnvironment(ServerMap *map,
 	ServerScripting *scriptIface, Server *server,
-	const std::string &path_world):
+	const std::string &path_world, MetricsBackend* m_metrics_backend):
 	Environment(server),
 	m_map(map),
 	m_script(scriptIface),
 	m_server(server),
 	m_path_world(path_world),
-	m_rgen(seed())
+	m_rgen(seed()),
+	m_metrics_backend(m_metrics_backend)
 {
 	// Determine which database backend to use
 	std::string conf_path = path_world + DIR_DELIM + "world.mt";
@@ -408,6 +409,31 @@ ServerEnvironment::ServerEnvironment(ServerMap *map,
 	std::string player_backend_name = "sqlite3";
 	std::string auth_backend_name = "sqlite3";
 
+	m_playermove_time = m_metrics_backend->addCounter(
+		"minetest_core_env_playermove_time",
+		"Env playermove time"
+	);
+
+	m_active_block_mgmt_time = m_metrics_backend->addCounter(
+		"minetest_core_env_active_block_mgmt_time",
+		"Env playermove time"
+	);
+
+	m_nodetimers_time = m_metrics_backend->addCounter(
+		"minetest_core_env_nodetimers_time",
+		"Env nodetimers time"
+	);
+
+	m_abm_time = m_metrics_backend->addCounter(
+		"minetest_core_env_abm_time",
+		"Env abm time"
+	);
+
+	m_globalstep_time = m_metrics_backend->addCounter(
+		"minetest_core_env_globalstep_time",
+		"Env globalstep time"
+	);
+
 	bool succeeded = conf.readConfigFile(conf_path.c_str());
 
 	// If we open world.mt read the backend configurations.
@@ -1301,6 +1327,7 @@ void ServerEnvironment::step(float dtime)
 		Handle players
 	*/
 	{
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: move players", SPT_AVG);
 		for (RemotePlayer *player : m_players) {
 			// Ignore disconnected players
@@ -1310,12 +1337,15 @@ void ServerEnvironment::step(float dtime)
 			// Move
 			player->move(dtime, this, 100 * BS);
 		}
+		u64 end_time = porting::getTimeUs();
+		m_playermove_time->increment(end_time - start_time);
 	}
 
 	/*
 		Manage active block list
 	*/
 	if (m_active_blocks_management_interval.step(dtime, m_cache_active_block_mgmt_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: update active blocks", SPT_AVG);
 		/*
 			Get player block positions
@@ -1376,12 +1406,16 @@ void ServerEnvironment::step(float dtime)
 
 			activateBlock(block);
 		}
+
+		u64 end_time = porting::getTimeUs();
+		m_active_block_mgmt_time->increment(end_time - start_time);
 	}
 
 	/*
 		Mess around in active blocks
 	*/
 	if (m_active_blocks_nodemetadata_interval.step(dtime, m_cache_nodetimer_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: Run node timers", SPT_AVG);
 
 		float dtime = m_cache_nodetimer_interval;
@@ -1419,9 +1453,12 @@ void ServerEnvironment::step(float dtime)
 				}
 			}
 		}
+		u64 end_time = porting::getTimeUs();
+		m_nodetimers_time->increment(end_time - start_time);
 	}
 
 	if (m_active_block_modifier_interval.step(dtime, m_cache_abm_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "SEnv: modify in blocks avg per interval", SPT_AVG);
 		TimeTaker timer("modify in active blocks per interval");
 
@@ -1470,12 +1507,17 @@ void ServerEnvironment::step(float dtime)
 		g_profiler->avg("ServerEnv: ABMs run", abms_run);
 
 		timer.stop(true);
+		u64 end_time = porting::getTimeUs();
+		m_abm_time->increment(end_time - start_time);
 	}
 
 	/*
 		Step script environment (run global on_step())
 	*/
+	u64 start_time = porting::getTimeUs();
 	m_script->environment_Step(dtime);
+	u64 end_time = porting::getTimeUs();
+	m_globalstep_time->increment(end_time - start_time);
 
 	/*
 		Step active objects
diff --git a/src/serverenvironment.h b/src/serverenvironment.h
index a11c814ed..f2589fac2 100644
--- a/src/serverenvironment.h
+++ b/src/serverenvironment.h
@@ -24,7 +24,9 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include "mapnode.h"
 #include "settings.h"
 #include "server/activeobjectmgr.h"
+#include "util/metricsbackend.h"
 #include "util/numeric.h"
+#include "porting.h"
 #include <set>
 #include <random>
 
@@ -194,7 +196,7 @@ class ServerEnvironment : public Environment
 {
 public:
 	ServerEnvironment(ServerMap *map, ServerScripting *scriptIface,
-		Server *server, const std::string &path_world);
+		Server *server, const std::string &path_world, MetricsBackend* m_metrics_backend);
 	~ServerEnvironment();
 
 	Map & getMap();
@@ -475,4 +477,11 @@ class ServerEnvironment : public Environment
 	std::unordered_map<u32, u16> m_particle_spawner_attachments;
 
 	ServerActiveObject* createSAO(ActiveObjectType type, v3f pos, const std::string &data);
+
+	MetricsBackend* m_metrics_backend;
+	MetricCounterPtr m_playermove_time;
+	MetricCounterPtr m_active_block_mgmt_time;
+	MetricCounterPtr m_nodetimers_time;
+	MetricCounterPtr m_abm_time;
+	MetricCounterPtr m_globalstep_time;
 };
