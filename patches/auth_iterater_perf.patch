diff --git a/builtin/game/auth.lua b/builtin/game/auth.lua
index 7aedfc82..822b93fb 100644
--- a/builtin/game/auth.lua
+++ b/builtin/game/auth.lua
@@ -117,9 +117,9 @@ core.builtin_auth_handler = {
 		auth_entry.last_login = os.time()
 		core_auth.save(auth_entry)
 	end,
-	iterate = function()
+	iterate = function(name_lower)
 		local names = {}
-		local nameslist = core_auth.list_names()
+		local nameslist = core_auth.list_names(name_lower)
 		for k,v in pairs(nameslist) do
 			names[v] = true
 		end
@@ -137,7 +137,7 @@ core.register_on_prejoinplayer(function(name, ip)
 	end
 
 	local name_lower = name:lower()
-	for k in core.builtin_auth_handler.iterate() do
+	for k in core.builtin_auth_handler.iterate(name_lower) do
 		if k:lower() == name_lower then
 			return string.format("\nCannot create new player called '%s'. "..
 					"Another account called '%s' is already registered. "..
diff --git a/src/database/database-files.cpp b/src/database/database-files.cpp
index d09f1c07..f31dc99b 100644
--- a/src/database/database-files.cpp
+++ b/src/database/database-files.cpp
@@ -227,12 +227,16 @@ bool AuthDatabaseFiles::deleteAuth(const std::string &name)
 	return writeAuthFile();
 }
 
-void AuthDatabaseFiles::listNames(std::vector<std::string> &res)
+void AuthDatabaseFiles::listNames(std::vector<std::string> &res, const std::string &name)
 {
+	std::string name_lowercase = name;
+	transform(name_lowercase.begin(), name_lowercase.end(), name_lowercase.begin(), ::tolower);
+
 	res.clear();
 	res.reserve(m_auth_list.size());
 	for (const auto &res_pair : m_auth_list) {
-		res.push_back(res_pair.first);
+		if (res_pair.first == name_lowercase)
+			res.push_back(res_pair.first);
 	}
 }
 
diff --git a/src/database/database-files.h b/src/database/database-files.h
index cb830a3e..0bf16050 100644
--- a/src/database/database-files.h
+++ b/src/database/database-files.h
@@ -25,6 +25,7 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 
 #include "database.h"
 #include <unordered_map>
+#include <algorithm>
 
 class PlayerDatabaseFiles : public PlayerDatabase
 {
@@ -53,7 +54,7 @@ class AuthDatabaseFiles : public AuthDatabase
 	virtual bool saveAuth(const AuthEntry &authEntry);
 	virtual bool createAuth(AuthEntry &authEntry);
 	virtual bool deleteAuth(const std::string &name);
-	virtual void listNames(std::vector<std::string> &res);
+	virtual void listNames(std::vector<std::string> &res, const std::string &name);
 	virtual void reload();
 
 private:
diff --git a/src/database/database-sqlite3.cpp b/src/database/database-sqlite3.cpp
index 1bacdfe6..5bf91dd6 100644
--- a/src/database/database-sqlite3.cpp
+++ b/src/database/database-sqlite3.cpp
@@ -662,7 +662,7 @@ void AuthDatabaseSQLite3::initStatements()
 	PREPARE_STATEMENT(create, "INSERT INTO auth (name, password, last_login) VALUES (?, ?, ?)");
 	PREPARE_STATEMENT(delete, "DELETE FROM auth WHERE name = ?");
 
-	PREPARE_STATEMENT(list_names, "SELECT name FROM auth ORDER BY name DESC");
+	PREPARE_STATEMENT(list_names, "SELECT name FROM auth WHERE name = ? COLLATE NOCASE");
 
 	PREPARE_STATEMENT(read_privs, "SELECT privilege FROM user_privileges WHERE id = ?");
 	PREPARE_STATEMENT(write_privs, "INSERT OR IGNORE INTO user_privileges (id, privilege) VALUES (?, ?)");
@@ -747,10 +747,11 @@ bool AuthDatabaseSQLite3::deleteAuth(const std::string &name)
 	return changes > 0;
 }
 
-void AuthDatabaseSQLite3::listNames(std::vector<std::string> &res)
+void AuthDatabaseSQLite3::listNames(std::vector<std::string> &res, const std::string &name)
 {
 	verifyDatabase();
 
+	str_to_sqlite(m_stmt_list_names, 1, name);
 	while (sqlite3_step(m_stmt_list_names) == SQLITE_ROW) {
 		res.push_back(sqlite_to_string(m_stmt_list_names, 0));
 	}
diff --git a/src/database/database-sqlite3.h b/src/database/database-sqlite3.h
index d7202a91..fdfd28c1 100644
--- a/src/database/database-sqlite3.h
+++ b/src/database/database-sqlite3.h
@@ -212,7 +212,7 @@ class AuthDatabaseSQLite3 : private Database_SQLite3, public AuthDatabase
 	virtual bool saveAuth(const AuthEntry &authEntry);
 	virtual bool createAuth(AuthEntry &authEntry);
 	virtual bool deleteAuth(const std::string &name);
-	virtual void listNames(std::vector<std::string> &res);
+	virtual void listNames(std::vector<std::string> &res, const std::string &name);
 	virtual void reload();
 
 protected:
diff --git a/src/database/database.h b/src/database/database.h
index b7d55193..cbddf571 100644
--- a/src/database/database.h
+++ b/src/database/database.h
@@ -81,6 +81,6 @@ class AuthDatabase
 	virtual bool saveAuth(const AuthEntry &authEntry) = 0;
 	virtual bool createAuth(AuthEntry &authEntry) = 0;
 	virtual bool deleteAuth(const std::string &name) = 0;
-	virtual void listNames(std::vector<std::string> &res) = 0;
+	virtual void listNames(std::vector<std::string> &res, const std::string &name) = 0;
 	virtual void reload() = 0;
 };
diff --git a/src/script/lua_api/l_auth.cpp b/src/script/lua_api/l_auth.cpp
index 0fc57ba3..0f64d9f3 100644
--- a/src/script/lua_api/l_auth.cpp
+++ b/src/script/lua_api/l_auth.cpp
@@ -177,8 +177,9 @@ int ModApiAuth::l_auth_list_names(lua_State *L)
 	AuthDatabase *auth_db = getAuthDb(L);
 	if (!auth_db)
 		return 0;
+	std::string name(luaL_checkstring(L, 1));
 	std::vector<std::string> names;
-	auth_db->listNames(names);
+	auth_db->listNames(names, name);
 	lua_createtable(L, names.size(), 0);
 	int table = lua_gettop(L);
 	int i = 1;
diff --git a/src/serverenvironment.cpp b/src/serverenvironment.cpp
index 333d32ff..8ac78b9d 100644
--- a/src/serverenvironment.cpp
+++ b/src/serverenvironment.cpp
@@ -2226,7 +2226,7 @@ bool ServerEnvironment::migrateAuthDatabase(
 				migrate_to, game_params.world_path, world_mt));
 
 		std::vector<std::string> names_list;
-		srcdb->listNames(names_list);
+		srcdb->listNames(names_list, ""); //TODO: migration does not work because of that!
 		for (const std::string &name : names_list) {
 			actionstream << "Migrating auth entry for " << name << std::endl;
 			bool success;
diff --git a/src/unittest/test_authdatabase.cpp b/src/unittest/test_authdatabase.cpp
index 1e1744d4..5e792e78 100644
--- a/src/unittest/test_authdatabase.cpp
+++ b/src/unittest/test_authdatabase.cpp
@@ -279,7 +279,7 @@ void TestAuthDatabase::testListNames()
 	authEntry.last_login = 1003;
 	auth_db->createAuth(authEntry);
 
-	auth_db->listNames(list);
+	auth_db->listNames(list, "SecondName");
 	// not necessarily sorted, so sort before comparing
 	std::sort(list.begin(), list.end());
 	UASSERTEQ(std::string, str_join(list, ","), "SecondName,TestName");
