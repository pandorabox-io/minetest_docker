diff --git a/src/server.cpp b/src/server.cpp
index b5352749c..fa787e9e1 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -271,6 +271,36 @@ Server::Server(
 			"minetest_core_server_packet_recv_processed",
 			"Valid received packets processed");
 
+	m_sendblocks_time = m_metrics_backend->addCounter(
+			"minetest_core_sendblockstime",
+			"Microseconds used for block sending"
+	);
+
+	m_sent_blocks = m_metrics_backend->addCounter(
+			"minetest_core_sent_blocks",
+			"number of sent blocks"
+	);
+
+	m_env_step_time = m_metrics_backend->addCounter(
+			"minetest_core_step_time",
+			"step time count"
+	);
+
+	m_map_timer_unload_time = m_metrics_backend->addCounter(
+			"minetest_core_timer_unload_time",
+			"map timer and unload time"
+	);
+
+	m_mapedit_time = m_metrics_backend->addCounter(
+			"minetest_core_mapedit_time",
+			"map edit time"
+	);
+
+	m_mapsave_time = m_metrics_backend->addCounter(
+			"minetest_core_mapsave_time",
+			"map save time"
+	);
+
 	m_lag_gauge->set(g_settings->getFloat("dedicated_server_step"));
 }
 
@@ -437,7 +467,7 @@ void Server::init()
 	m_craftdef->initHashes(this);
 
 	// Initialize Environment
-	m_env = new ServerEnvironment(servermap, m_script, this, m_path_world);
+	m_env = new ServerEnvironment(servermap, m_script, this, m_path_world, m_metrics_backend.get());
 
 	m_inventory_mgr->setEnv(m_env);
 	m_clients.setEnv(m_env);
@@ -597,18 +627,28 @@ void Server::AsyncRunStep(bool initial_step)
 		}
 		m_env->reportMaxLagEstimate(max_lag);
 		// Step environment
+
+		u64 start_time = porting::getTimeUs();
 		m_env->step(dtime);
+		u64 end_time = porting::getTimeUs();
+
+		m_env_step_time->increment(end_time - start_time);
 	}
 
 	static const float map_timer_and_unload_dtime = 2.92;
 	if(m_map_timer_and_unload_interval.step(dtime, map_timer_and_unload_dtime))
 	{
+		u64 start_time = porting::getTimeUs();
 		MutexAutoLock lock(m_env_mutex);
 		// Run Map's timers and unload unused data
 		ScopeProfiler sp(g_profiler, "Server: map timer and unload");
 		m_env->getMap().timerUpdate(map_timer_and_unload_dtime,
 			g_settings->getFloat("server_unload_unused_data_timeout"),
 			U32_MAX);
+
+		u64 end_time = porting::getTimeUs();
+
+		m_map_timer_unload_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -829,6 +869,8 @@ void Server::AsyncRunStep(bool initial_step)
 		Send queued-for-sending map edit events.
 	*/
 	{
+		u64 start_time = porting::getTimeUs();
+
 		// We will be accessing the environment
 		MutexAutoLock lock(m_env_mutex);
 
@@ -929,6 +971,9 @@ void Server::AsyncRunStep(bool initial_step)
 		// Send all metadata updates
 		if (node_meta_updates.size())
 			sendMetadataChanged(node_meta_updates);
+
+		u64 end_time = porting::getTimeUs();
+		m_mapedit_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -947,6 +992,8 @@ void Server::AsyncRunStep(bool initial_step)
 
 	// Save map, players and auth stuff
 	{
+		u64 start_time = porting::getTimeUs();
+
 		float &counter = m_savemap_timer;
 		counter += dtime;
 		static thread_local const float save_interval =
@@ -971,6 +1018,9 @@ void Server::AsyncRunStep(bool initial_step)
 			// Save environment metadata
 			m_env->saveMeta();
 		}
+
+		u64 end_time = porting::getTimeUs();
+		m_mapsave_time->increment(end_time - start_time);
 	}
 
 	m_shutdown_state.tick(dtime, this);
@@ -2347,6 +2397,7 @@ void Server::SendBlockNoLock(session_t peer_id, MapBlock *block, u8 ver,
 
 void Server::SendBlocks(float dtime)
 {
+	u64 start_time = porting::getTimeUs();
 	MutexAutoLock envlock(m_env_mutex);
 	//TODO check if one big lock could be faster then multiple small ones
 
@@ -2405,8 +2456,12 @@ void Server::SendBlocks(float dtime)
 
 		client->SentBlock(block_to_send.pos);
 		total_sending++;
+
+		m_sent_blocks->increment(1);
 	}
 	m_clients.unlock();
+	u64 end_time = porting::getTimeUs();
+	m_sendblocks_time->increment(end_time - start_time);
 }
 
 bool Server::SendBlock(session_t peer_id, const v3s16 &blockpos)
diff --git a/src/server.h b/src/server.h
index 4b3ac5cf7..b6a296281 100644
--- a/src/server.h
+++ b/src/server.h
@@ -673,6 +673,13 @@ class Server : public con::PeerHandler, public MapEventReceiver,
 	MetricCounterPtr m_aom_buffer_counter;
 	MetricCounterPtr m_packet_recv_counter;
 	MetricCounterPtr m_packet_recv_processed_counter;
+
+	MetricCounterPtr m_sent_blocks;
+	MetricCounterPtr m_sendblocks_time;
+	MetricCounterPtr m_env_step_time;
+	MetricCounterPtr m_map_timer_unload_time;
+	MetricCounterPtr m_mapedit_time;
+	MetricCounterPtr m_mapsave_time;
 };
 
 /*
diff --git a/src/serverenvironment.cpp b/src/serverenvironment.cpp
index d044b003d..2df589ae2 100644
--- a/src/serverenvironment.cpp
+++ b/src/serverenvironment.cpp
@@ -393,13 +393,14 @@ static std::random_device seed;
 
 ServerEnvironment::ServerEnvironment(ServerMap *map,
 	ServerScripting *scriptIface, Server *server,
-	const std::string &path_world):
+	const std::string &path_world, MetricsBackend* m_metrics_backend):
 	Environment(server),
 	m_map(map),
 	m_script(scriptIface),
 	m_server(server),
 	m_path_world(path_world),
-	m_rgen(seed())
+	m_rgen(seed()),
+	m_metrics_backend(m_metrics_backend)
 {
 	// Determine which database backend to use
 	std::string conf_path = path_world + DIR_DELIM + "world.mt";
@@ -408,6 +409,31 @@ ServerEnvironment::ServerEnvironment(ServerMap *map,
 	std::string player_backend_name = "sqlite3";
 	std::string auth_backend_name = "sqlite3";
 
+	m_playermove_time = m_metrics_backend->addCounter(
+		"minetest_core_env_playermove_time",
+		"Env playermove time"
+	);
+
+	m_active_block_mgmt_time = m_metrics_backend->addCounter(
+		"minetest_core_env_active_block_mgmt_time",
+		"Env playermove time"
+	);
+
+	m_nodetimers_time = m_metrics_backend->addCounter(
+		"minetest_core_env_nodetimers_time",
+		"Env nodetimers time"
+	);
+
+	m_abm_time = m_metrics_backend->addCounter(
+		"minetest_core_env_abm_time",
+		"Env abm time"
+	);
+
+	m_globalstep_time = m_metrics_backend->addCounter(
+		"minetest_core_env_globalstep_time",
+		"Env globalstep time"
+	);
+
 	bool succeeded = conf.readConfigFile(conf_path.c_str());
 
 	// If we open world.mt read the backend configurations.
@@ -1302,6 +1328,7 @@ void ServerEnvironment::step(float dtime)
 		Handle players
 	*/
 	{
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: move players", SPT_AVG);
 		for (RemotePlayer *player : m_players) {
 			// Ignore disconnected players
@@ -1311,12 +1338,15 @@ void ServerEnvironment::step(float dtime)
 			// Move
 			player->move(dtime, this, 100 * BS);
 		}
+		u64 end_time = porting::getTimeUs();
+		m_playermove_time->increment(end_time - start_time);
 	}
 
 	/*
 		Manage active block list
 	*/
 	if (m_active_blocks_management_interval.step(dtime, m_cache_active_block_mgmt_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: update active blocks", SPT_AVG);
 		/*
 			Get player block positions
@@ -1377,12 +1407,16 @@ void ServerEnvironment::step(float dtime)
 
 			activateBlock(block);
 		}
+
+		u64 end_time = porting::getTimeUs();
+		m_active_block_mgmt_time->increment(end_time - start_time);
 	}
 
 	/*
 		Mess around in active blocks
 	*/
 	if (m_active_blocks_nodemetadata_interval.step(dtime, m_cache_nodetimer_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "ServerEnv: Run node timers", SPT_AVG);
 
 		float dtime = m_cache_nodetimer_interval;
@@ -1418,9 +1452,12 @@ void ServerEnvironment::step(float dtime)
 				}
 			}
 		}
+		u64 end_time = porting::getTimeUs();
+		m_nodetimers_time->increment(end_time - start_time);
 	}
 
 	if (m_active_block_modifier_interval.step(dtime, m_cache_abm_interval)) {
+		u64 start_time = porting::getTimeUs();
 		ScopeProfiler sp(g_profiler, "SEnv: modify in blocks avg per interval", SPT_AVG);
 		TimeTaker timer("modify in active blocks per interval");
 
@@ -1469,12 +1506,17 @@ void ServerEnvironment::step(float dtime)
 		g_profiler->avg("ServerEnv: ABMs run", abms_run);
 
 		timer.stop(true);
+		u64 end_time = porting::getTimeUs();
+		m_abm_time->increment(end_time - start_time);
 	}
 
 	/*
 		Step script environment (run global on_step())
 	*/
+	u64 start_time = porting::getTimeUs();
 	m_script->environment_Step(dtime);
+	u64 end_time = porting::getTimeUs();
+	m_globalstep_time->increment(end_time - start_time);
 
 	/*
 		Step active objects
diff --git a/src/serverenvironment.h b/src/serverenvironment.h
index cfd5b8f3e..fe4d67ace 100644
--- a/src/serverenvironment.h
+++ b/src/serverenvironment.h
@@ -24,7 +24,9 @@ with this program; if not, write to the Free Software Foundation, Inc.,
 #include "mapnode.h"
 #include "settings.h"
 #include "server/activeobjectmgr.h"
+#include "util/metricsbackend.h"
 #include "util/numeric.h"
+#include "porting.h"
 #include <set>
 #include <random>
 
@@ -202,7 +204,7 @@ class ServerEnvironment : public Environment
 {
 public:
 	ServerEnvironment(ServerMap *map, ServerScripting *scriptIface,
-		Server *server, const std::string &path_world);
+		Server *server, const std::string &path_world, MetricsBackend* m_metrics_backend);
 	~ServerEnvironment();
 
 	Map & getMap();
@@ -476,4 +478,11 @@ class ServerEnvironment : public Environment
 	std::unordered_map<u32, u16> m_particle_spawner_attachments;
 
 	ServerActiveObject* createSAO(ActiveObjectType type, v3f pos, const std::string &data);
+
+	MetricsBackend* m_metrics_backend;
+	MetricCounterPtr m_playermove_time;
+	MetricCounterPtr m_active_block_mgmt_time;
+	MetricCounterPtr m_nodetimers_time;
+	MetricCounterPtr m_abm_time;
+	MetricCounterPtr m_globalstep_time;
 };
