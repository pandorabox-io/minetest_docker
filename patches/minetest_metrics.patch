diff --git a/src/server.cpp b/src/server.cpp
index b5352749c..9347ae940 100644
--- a/src/server.cpp
+++ b/src/server.cpp
@@ -271,6 +271,36 @@ Server::Server(
 			"minetest_core_server_packet_recv_processed",
 			"Valid received packets processed");
 
+	m_sendblocks_time = m_metrics_backend->addCounter(
+			"minetest_core_sendblockstime",
+			"Microseconds used for block sending"
+	);
+
+	m_sent_blocks = m_metrics_backend->addCounter(
+			"minetest_core_sent_blocks",
+			"number of sent blocks"
+	);
+
+	m_env_step_time = m_metrics_backend->addCounter(
+			"minetest_core_step_time",
+			"step time count"
+	);
+
+	m_map_timer_unload_time = m_metrics_backend->addCounter(
+			"minetest_core_timer_unload_time",
+			"map timer and unload time"
+	);
+
+	m_mapedit_time = m_metrics_backend->addCounter(
+			"minetest_core_mapedit_time",
+			"map edit time"
+	);
+
+	m_mapsave_time = m_metrics_backend->addCounter(
+			"minetest_core_mapsave_time",
+			"map save time"
+	);
+
 	m_lag_gauge->set(g_settings->getFloat("dedicated_server_step"));
 }
 
@@ -597,18 +627,28 @@ void Server::AsyncRunStep(bool initial_step)
 		}
 		m_env->reportMaxLagEstimate(max_lag);
 		// Step environment
+
+		u64 start_time = porting::getTimeUs();
 		m_env->step(dtime);
+		u64 end_time = porting::getTimeUs();
+
+		m_env_step_time->increment(end_time - start_time);
 	}
 
 	static const float map_timer_and_unload_dtime = 2.92;
 	if(m_map_timer_and_unload_interval.step(dtime, map_timer_and_unload_dtime))
 	{
+		u64 start_time = porting::getTimeUs();
 		MutexAutoLock lock(m_env_mutex);
 		// Run Map's timers and unload unused data
 		ScopeProfiler sp(g_profiler, "Server: map timer and unload");
 		m_env->getMap().timerUpdate(map_timer_and_unload_dtime,
 			g_settings->getFloat("server_unload_unused_data_timeout"),
 			U32_MAX);
+
+		u64 end_time = porting::getTimeUs();
+
+		m_map_timer_unload_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -829,6 +869,8 @@ void Server::AsyncRunStep(bool initial_step)
 		Send queued-for-sending map edit events.
 	*/
 	{
+		u64 start_time = porting::getTimeUs();
+
 		// We will be accessing the environment
 		MutexAutoLock lock(m_env_mutex);
 
@@ -929,6 +971,9 @@ void Server::AsyncRunStep(bool initial_step)
 		// Send all metadata updates
 		if (node_meta_updates.size())
 			sendMetadataChanged(node_meta_updates);
+
+		u64 end_time = porting::getTimeUs();
+		m_mapedit_time->increment(end_time - start_time);
 	}
 
 	/*
@@ -947,6 +992,8 @@ void Server::AsyncRunStep(bool initial_step)
 
 	// Save map, players and auth stuff
 	{
+		u64 start_time = porting::getTimeUs();
+
 		float &counter = m_savemap_timer;
 		counter += dtime;
 		static thread_local const float save_interval =
@@ -971,6 +1018,9 @@ void Server::AsyncRunStep(bool initial_step)
 			// Save environment metadata
 			m_env->saveMeta();
 		}
+
+		u64 end_time = porting::getTimeUs();
+		m_mapsave_time->increment(end_time - start_time);
 	}
 
 	m_shutdown_state.tick(dtime, this);
@@ -2347,6 +2397,7 @@ void Server::SendBlockNoLock(session_t peer_id, MapBlock *block, u8 ver,
 
 void Server::SendBlocks(float dtime)
 {
+	u64 start_time = porting::getTimeUs();
 	MutexAutoLock envlock(m_env_mutex);
 	//TODO check if one big lock could be faster then multiple small ones
 
@@ -2407,6 +2458,8 @@ void Server::SendBlocks(float dtime)
 		total_sending++;
 	}
 	m_clients.unlock();
+	u64 end_time = porting::getTimeUs();
+	m_sendblocks_time->increment(end_time - start_time);
 }
 
 bool Server::SendBlock(session_t peer_id, const v3s16 &blockpos)
@@ -2425,6 +2478,7 @@ bool Server::SendBlock(session_t peer_id, const v3s16 &blockpos)
 			client->net_proto_version);
 	m_clients.unlock();
 
+	m_sent_blocks->increment(1);
 	return true;
 }
 
diff --git a/src/server.h b/src/server.h
index 4b3ac5cf7..b6a296281 100644
--- a/src/server.h
+++ b/src/server.h
@@ -673,6 +673,13 @@ class Server : public con::PeerHandler, public MapEventReceiver,
 	MetricCounterPtr m_aom_buffer_counter;
 	MetricCounterPtr m_packet_recv_counter;
 	MetricCounterPtr m_packet_recv_processed_counter;
+
+	MetricCounterPtr m_sent_blocks;
+	MetricCounterPtr m_sendblocks_time;
+	MetricCounterPtr m_env_step_time;
+	MetricCounterPtr m_map_timer_unload_time;
+	MetricCounterPtr m_mapedit_time;
+	MetricCounterPtr m_mapsave_time;
 };
 
 /*
